#include <bits/stdc++.h>
using namespace std;

int min_partitions(string s) {
    int n = s.size();
    vector<vector<bool>> dp(n, vector<bool>(n, false));
    for (int i = 0; i < n; i++) {
        dp[i][i] = true;
    }
    for (int i = 0; i < n-1; i++) {
        dp[i][i+1] = (s[i] == s[i+1]);
    }
    for (int k = 2; k < n; k++) {
        for (int i = 0; i < n-k; i++) {
            int j = i+k;
            dp[i][j] = (s[i] == s[j]) && (dp[i+1][j-1]);
        }
    }
    vector<int> dp2(n, INT_MAX);
    dp2[0] = 0;
    for (int i = 1; i < n; i++) {
        if (dp[0][i]) {
            dp2[i] = 0;
        } else {
            for (int j = 0; j < i; j++) {
                if (dp[j+1][i]) {
                    dp2[i] = min(dp2[i], dp2[j]+1);
                }
            }
        }
    }
    return dp2[n-1];
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        cout << min_partitions(s) << endl;
    }
    return 0;
}
